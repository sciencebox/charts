#
# ScienceBox
#
sciencebox:
  # sss keytab for eos
  #   Will be used by eos server ('eos:' section) and fusex ('swan:fusex:' section).
  #   Options:
  #     - createSecret: Create a secret either from file or from value.
  #         If set to false, no secrets will be automatically generated. In this case, secretName must
  #         be set to an existing secret containering the sss keytab
  #     - secretName: Name of the secret containing the sss keytab
  #     - fromFile: Provide the path to a file containing the eos keytab (defaults to files/eos.keytab)
  #         A secret with name <secretName> will be created from it
  #     - fromValue: Provide the full keytab as a string
  #         Example: "0 u:daemon g:daemon n:eos-test+ N:69275826269580...
  #         A secret with name <secretName> will be created from it
  sssKeytab:
    createSecret: true
    secretName: &sssKeytabName sciencebox-eos-sss-keytab
    fromFile: files/eos.keytab
    #fromValue:

#
# Global values
#
global:
  #
  # EOS image tag:
  #   - Used by eos-server (qdb, mq, mgm, fst) (eos-all image)
  #             eos-instance-config (eos-all image)
  #             fusex in SWAN (eos-fusex image)
  ## tag: 4.8.80
  #    As of now we are using 4.8.80 for all but fusex, which uses 4.8.62 (due to OAuth issue)
  #
  # SSS keytab:
  #   - Anchor from sciencebox:sssKeytab
  #   - Used by eos-server (qdb, mq, mgm, fst) and eos-instance-config
  sssKeytab:
    secret: *sssKeytabName


#
# LDAP -- OpenLDAP
#
#
#   The LDAP server chart
ldap:
  image:
    repository: &ldapImageRepo osixia/openldap
    tag: &ldapImageTag 1.5.0
  persistence:
    enabled: false
  adminPassword: &ldapAdminPassword admin
  configPassword: config
  env:
    LDAP_ORGANISATION: ownCloud
    LDAP_DOMAIN: owncloud.com
    LDAP_BASE_DN: &ldapBaseDn dc=owncloud,dc=com
    LDAP_READONLY_USER: "true"
    LDAP_READONLY_USER_USERNAME: &ldapReadonlyUsername readuser
    LDAP_READONLY_USER_PASSWORD: &ldapReadonlyPassword readuser
    LDAP_TLS_VERIFY_CLIENT: try
    LDAP_RFC2307BIS_SCHEMA: "true"
    LDAP_REMOVE_CONFIG_AFTER_SETUP: "false"
  customLdifFiles:
    readme.warning: |-
      #
      # WARNING:
      #   The ability to "seed LDAP database with ldif" (https://github.com/osixia/docker-openldap#seed-ldap-database-with-ldif) in osixia/docker-openldap is buggy,
      #   and so is the resulting `customLdifFiles` in the OpenLDAP Helm Chart --> https://github.com/jp-gouin/helm-openldap#boostrap-custom-ldif.
      #
      #   Please, don't waste your time trying to make it work.
      #
      #   The ldap-instance-config chart (https://github.com/sciencebox/charts/tree/master/ldap-instance-config) was created to workaround this problem.
      #   Check its README for further details and pointers to upstream issues.
      #
    10_owncloud_schema.ldif: |-
      # This LDIF files describes the ownCloud schema and can be used to add two optional attributes: ownCloudQuota and ownCloudUUID
      # The ownCloudUUID is used to store a unique, non-reassignable, persistent identifier for users and groups
      #
      dn: cn=owncloud,cn=schema,cn=config
      objectClass: olcSchemaConfig
      cn: owncloud
      olcAttributeTypes: ( 1.3.6.1.4.1.39430.1.1.1 NAME 'ownCloudQuota' DESC 'User Quota (e.g. 2 GB)' EQUALITY caseExactMatch SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE )
      olcAttributeTypes: ( 1.3.6.1.4.1.39430.1.1.2 NAME 'ownCloudUUID' DESC 'A non-reassignable and persistent account ID)' EQUALITY uuidMatch SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.1.16.1 SINGLE-VALUE )
      olcObjectClasses: ( 1.3.6.1.4.1.39430.1.2.1 NAME 'ownCloud' DESC 'ownCloud LDAP Schema' AUXILIARY MAY ( ownCloudQuota $ ownCloudUUID ) )

  phpldapadmin:
    enabled: false
    ingress:
      enabled: false

  ltb-passwd:
    enabled: false
    ingress:
      enabled: false
#
# The ldap-instance-config chart to populare the LDAP server with custom users and groups.
ldap-instance-config:
  image:
    repository: *ldapImageRepo
    tag: *ldapImageTag
  # TODO: The following params should be guessed:
  ldap_uri: &ldapUri ldap://sciencebox-ldap:389
  ldap_binddn: cn=admin,dc=owncloud,dc=com
  ldap_bindpw: *ldapAdminPassword
  ldifFiles:
    # As per https://github.com/owncloud/ocis/tree/master/deployments/examples/ocis_ldap/config/ldap/ldif
    10_users.ldif: |-
      dn: ou=users,dc=owncloud,dc=com
      objectClass: organizationalUnit
      ou: users

      # Start dn with uid (user identifier / login), not cn (Firstname + Surname)
      dn: uid=einstein,ou=users,dc=owncloud,dc=com
      objectClass: inetOrgPerson
      objectClass: organizationalPerson
      objectClass: ownCloud
      objectClass: person
      objectClass: posixAccount
      objectClass: top
      uid: einstein
      givenName: Albert
      sn: Einstein
      cn: einstein
      displayName: Albert Einstein
      description: A German-born theoretical physicist who developed the theory of relativity, one of the two pillars of modern physics (alongside quantum mechanics).
      mail: einstein@example.org
      uidNumber: 20000
      gidNumber: 30000
      homeDirectory: /home/einstein
      ownCloudUUID:: NGM1MTBhZGEtYzg2Yi00ODE1LTg4MjAtNDJjZGY4MmMzZDUx
      userPassword:: e1NTSEF9TXJEcXpFNGdKbXZxbVRVTGhvWEZ1VzJBbkV3NWFLK3J3WTIvbHc9PQ==

      dn: uid=marie,ou=users,dc=owncloud,dc=com
      objectClass: inetOrgPerson
      objectClass: organizationalPerson
      objectClass: ownCloud
      objectClass: person
      objectClass: posixAccount
      objectClass: top
      uid: marie
      givenName: Marie
      sn: Curie
      cn: marie
      displayName: Marie Sk≈Çodowska Curie
      description: A Polish and naturalized-French physicist and chemist who conducted pioneering research on radioactivity.
      mail: marie@example.org
      uidNumber: 20001
      gidNumber: 30000
      homeDirectory: /home/marie
      ownCloudUUID:: ZjdmYmY4YzgtMTM5Yi00Mzc2LWIzMDctY2YwYThjMmQwZDlj
      userPassword:: e1NTSEF9UmFvQWs3TU9jRHBIUWY3bXN3MGhHNnVraFZQWnRIRlhOSUNNZEE9PQ==

      dn: uid=richard,ou=users,dc=owncloud,dc=com
      objectClass: inetOrgPerson
      objectClass: organizationalPerson
      objectClass: ownCloud
      objectClass: person
      objectClass: posixAccount
      objectClass: top
      uid: richard
      givenName: Richard
      sn: Feynman
      cn: richard
      displayName: Richard Phillips Feynman
      description: An American theoretical physicist, known for his work in the path integral formulation of quantum mechanics, the theory of quantum electrodynamics, the physics of the superfluidity of supercooled liquid helium, as well as his work in particle physics for which he proposed the parton model.
      mail: richard@example.org
      uidNumber: 20002
      gidNumber: 30000
      homeDirectory: /home/richard
      ownCloudUUID:: OTMyYjQ1NDAtOGQxNi00ODFlLThlZjQtNTg4ZTRiNmIxNTFj
      userPassword:: e1NTSEF9Z05LZTRreHdmOGRUREY5eHlhSmpySTZ3MGxSVUM1d1RGcWROTVE9PQ==

      dn: uid=moss,ou=users,dc=owncloud,dc=com
      objectClass: inetOrgPerson
      objectClass: organizationalPerson
      objectClass: ownCloud
      objectClass: person
      objectClass: posixAccount
      objectClass: top
      uid: moss
      givenName: Maurice
      sn: Moss
      cn: moss
      displayName: Maurice Moss
      description: A worker in the IT Department of Reynholm Industries. Of all the working staff in the IT Department, he is the most hard-working, the most experienced, and the most capable of doing his job well. He puts a lot of effort into his work, however he does not get the credit he deserves.
      mail: moss@example.org
      uidNumber: 20003
      gidNumber: 30000
      homeDirectory: /home/moss
      ownCloudUUID:: MDU4YmZmOTUtNjcwOC00ZmU1LTkxZTQtOWVhM2QzNzc1ODhi
      userPassword:: e1NTSEF9N0hEdTRoMkFDVExFWWt4U0RtSDZVQjhmUlpKRExDZDc=

      dn: uid=admin,ou=users,dc=owncloud,dc=com
      objectClass: inetOrgPerson
      objectClass: organizationalPerson
      objectClass: ownCloud
      objectClass: person
      objectClass: posixAccount
      objectClass: top
      uid: admin
      givenName: Admin
      sn: Admin
      cn: admin
      displayName: Admin
      description: An admin for this oCIS instance.
      mail: admin@example.org
      uidNumber: 20004
      gidNumber: 30000
      homeDirectory: /home/admin
      ownCloudUUID:: ZGRjMjAwNGMtMDk3Ny0xMWViLTlkM2YtYTc5Mzg4OGNkMGY4
      userPassword:: e1NTSEF9UWhmaFB3dERydTUydURoWFFObDRMbzVIckI3TkI5Nmo=

      dn: uid=reva,ou=users,dc=owncloud,dc=com
      objectClass: inetOrgPerson
      objectClass: organizationalPerson
      objectClass: ownCloud
      objectClass: person
      objectClass: posixAccount
      objectClass: top
      uid: reva
      givenName: reva
      sn: Reva
      cn: reva
      displayName: Reva
      description: The reva user for this oCIS instance.
      mail: reva@example.org
      uidNumber: 10001
      gidNumber: 15000
      homeDirectory: /home/reva
      ownCloudUUID:: NzJmMjM3ZGMtNjViNi00ZTIwLTkzZTEtNzRhYjY1ZjRjM2Iz
      userPassword:: e1NTSEF9ZTRQUEFpSUtxQ3JERWcrc2Y3MlZBRTU1Nk1FcGZVN1UK

    20_groups.ldif: |-
      dn: ou=groups,dc=owncloud,dc=com
      objectClass: organizationalUnit
      ou: groups

      dn: cn=users,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: users
      description: Users
      gidNumber: 30000
      ownCloudUUID:: NTA5YTlkY2QtYmIzNy00ZjRmLWEwMWEtMTlkY2EyN2Q5Y2Zh
      uniqueMember: uid=einstein,ou=users,dc=owncloud,dc=com
      uniqueMember: uid=marie,ou=users,dc=owncloud,dc=com
      uniqueMember: uid=richard,ou=users,dc=owncloud,dc=com
      uniqueMember: uid=moss,ou=users,dc=owncloud,dc=com
      uniqueMember: uid=admin,ou=users,dc=owncloud,dc=com

      dn: cn=sailing-lovers,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: sailing-lovers
      description: Sailing lovers
      gidNumber: 30001
      ownCloudUUID:: NjA0MGFhMTctOWM2NC00ZmVmLTliZDAtNzcyMzRkNzFiYWQw
      uniqueMember: uid=einstein,ou=users,dc=owncloud,dc=com

      dn: cn=violin-haters,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: violin-haters
      description: Violin haters
      gidNumber: 30002
      ownCloudUUID:: ZGQ1OGU1ZWMtODQyZS00OThiLTg4MDAtNjFmMmVjNmY5MTFm
      uniqueMember: uid=einstein,ou=users,dc=owncloud,dc=com

      dn: cn=radium-lovers,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: radium-lovers
      description: Radium lovers
      gidNumber: 30003
      ownCloudUUID:: N2I4N2ZkNDktMjg2ZS00YTVmLWJhZmQtYzUzNWQ1ZGQ5OTdh
      uniqueMember: uid=marie,ou=users,dc=owncloud,dc=com

      dn: cn=polonium-lovers,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: polonium-lovers
      description: Polonium lovers
      gidNumber: 30004
      ownCloudUUID:: Y2VkYzIxYWEtNDA3Mi00NjE0LTg2NzYtZmE5MTY1ZjU5OGZm
      uniqueMember: uid=marie,ou=users,dc=owncloud,dc=com

      dn: cn=quantum-lovers,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: quantum-lovers
      description: Quantum lovers
      gidNumber: 30005
      ownCloudUUID:: YTE3MjYxMDgtMDFmOC00YzMwLTg4ZGYtMmIxYTlkMWNiYTFh
      uniqueMember: uid=richard,ou=users,dc=owncloud,dc=com

      dn: cn=philosophy-haters,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: philosophy-haters
      description: Philosophy haters
      gidNumber: 30006
      ownCloudUUID:: MTY3Y2JlZTItMDUxOC00NTVhLWJmYjItMDMxZmUwNjIxZTVk
      uniqueMember: uid=richard,ou=users,dc=owncloud,dc=com

      dn: cn=physics-lovers,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: physics-lovers
      description: Physics lovers
      gidNumber: 30007
      ownCloudUUID:: MjYyOTgyYzEtMjM2Mi00YWZhLWJmZGYtOGNiZmVmNjRhMDZl
      uniqueMember: uid=einstein,ou=users,dc=owncloud,dc=com
      uniqueMember: uid=marie,ou=users,dc=owncloud,dc=com
      uniqueMember: uid=richard,ou=users,dc=owncloud,dc=com


#
# OCIS
#
ocis:
  ingress:
    enabled: true
    exposeIdp: true
    annotation:
      "nginx.ingress.kubernetes.io/backend-protocol": "HTTPS"
      
  image:
    repository: gitlab-registry.cern.ch/sciencebox/docker-images/ocis
    tag: 1.20.0
  extensions:
    - proxy
    - idp
  env:
    IDP_ACCESS_TOKEN_EXPIRATION: 28800
    IDP_ISS: https://sciencebox.local
    IDP_INSECURE: true
    IDP_HTTP_ADDR: 0.0.0.0:9130
    REVA_GATEWAY: sciencebox-gateway.default.svc.cluster.local:9142
    LDAP_URI: ldaps://sciencebox-ldap:636
    LDAP_INSECURE: true
    LDAP_BIND_DN: "cn=readuser,dc=owncloud,dc=com"
    LDAP_BIND_PASSWORD: readuser
    LDAP_GROUP_BASE_DN: "dc=owncloud,dc=com"
    LDAP_GROUPFILTER: "(objectclass=owncloud)"
    LDAP_GROUP_OBJECTCLASS: "groupOfUniqueNames"
    LDAP_USER_BASE_DN: "dc=owncloud,dc=com"
    LDAP_USERFILTER: "(objectclass=owncloud)"
    LDAP_USER_OBEJECTCLASS: "inetOrgPerson"
    LDAP_LOGIN_ATTRIBUTES: "uid,mail"
    IDP_LDAP_LOGIN_ATTRIBUTE: "uid"
    IDP_LDAP_UUID_ATTRIBUTE: "ownclouduuid"
    IDP_LDAP_UUID_ATTRIBUTE_TYPE: binary
    PROXY_ACCOUNT_BACKEND_TYPE: cs3
    OCIS_LOG_LEVEL: debug 
    PROXY_TLS: true 
    OCIS_JWT_SECRET: Pive-Fumkiu4
    STORAGE_TRANSFER_SECRET: replace-me-with-a-transfer-secret
    OCIS_MACHINE_AUTH_API_KEY: random_api_key
    OCIS_INSECURE: true
    PROXY_ENABLE_BASIC_AUTH: false
    ACCOUNTS_DEMO_USERS_AND_GROUPS: false 
    IDM_CREATE_DEMO_USERS: false 
#
# EOS
#
#
#   The server chart (aliased to eos) with qdb, mgm, and fst
eos:
  mgm:
    extraEnv:
      EOS_MGM_OIDC_INSECURE: "true"
      EOS_MGM_OIDC_MAP_FIELD: "preferred_username"
    mgmofs:
      instance: user
    ldapBindUsers:
      enable: true
      nslcd:
       config:
         ldap_uri: *ldapUri
         ldap_base: *ldapBaseDn
         ldap_binddn: cn=readuser,dc=owncloud,dc=com
         ldap_bindpw: *ldapReadonlyPassword
         ldap_user_search_base: ou=users,dc=owncloud,dc=com
         ldap_group_search_base: ou=groups,dc=owncloud,dc=com
         ldap_filter_passwd: (objectClass=posixAccount)
         ldap_filter_group: (objectClass=posixGroup)
  fst:
    replicaCount: 4
#
#   The eos-instance-config chart to configure the instance for the ScienceBox needs
eos-instance-config:
  tag: 4.8.80
  config:
    demoUsers:
      userList:
        admin:
          uid: 20004
          gid: 30000
        einstein:
          uid: 20000
          gid: 30000
        marie:
          uid: 20001
          gid: 30000
        moss:
          uid: 20003
          gid: 30000
        reva:
          uid: 10001
          gid: 15000
        richard:
          uid: 20002
          gid: 30000


#
# SWAN
#
swan:
  #
  # CVMFS mounts
  cvmfs:
    deployDaemonSet: &cvmfsDeployDS true
    deployCsiDriver: &cvmfsDeployCSI false
    useCsiDriver: &cvmfsUseCSI false
    repositories: &cvmfsRepos
      - cvmfs-config.cern.ch
      - sft.cern.ch
      - sft-nightlies.cern.ch
  #
  # EOS Fusex mount
  eos:
    deployDaemonSet: &eosDeployDS true
    deployCsiDriver: &eosDeployCSI false
    useCsiDriver: &eosUseCSI false
  fusex:
    checkMgmOnline:
      enabled: true
      eosMgmUrlAuto: true
    fusex:
      keytab:
        secret: *sssKeytabName
      hostMountpoint: /var/eos
      config:
        oauth2: 1
        eos_mgm_alias: "sciencebox-mgm.default.svc.cluster.local"
  #
  # JupyterHub
  jupyterhub:
    proxy:
      secretToken: 11df35dab7527b3798de5224f06458db1e0526fa65700e81e18f17f89822e0cf
    hub:
      image:
        name: "gitlab-registry.cern.ch/sciencebox/hotfixes/jupyterhub"
        tag: "v1.18-20220314"
        pullPolicy: "Always"
      # The default (pvc) is not working in openstack...
      # TODO: Add some persistency here
      db:
        type: sqlite-memory
      extraEnv:
        JUPYTERHUB_CRYPT_KEY: 8b9fa8fc38c56eb4b3194d875924bb27062635b038b75ffbc91d9a6212bd3e55
      cookieSecret: 07006b4975f06166c988122e78603740788e93846265b0aec791c387a9a83925
      config:
        SwanKubeSpawner:
          local_home: False     # Use the homedir on EOS
        KeyCloakAuthenticator:
          oidc_issuer: https://sciencebox.local
          client_id: swan
          client_secret: 4a045535-6b99-49d3-bf41-8b410cd965a6
          oauth_callback_url: https://sciencebox.hostname/swan/hub/oauth_callback
          tls_verify: false     # Accept self-signed/invalid certificate from OCIS IDP
          scope:
            - openid
            - email
            - profile
            - offline_access
          jwt_signing_algorithms:
            - HS256
            - RS256
            - PS256
          # With the CERN SSO we will get a valid token for EOS. If the eosxd supports oauth,
          # we will be able to use it from the terminal, even with local_home=True.
          # The oCIS idp probably doesn't support exchanging tokens, but we will be able to re-use
          # the swan token with EOS if needed (although we shouldn't)
          exchange_tokens:
          ##   - eos-service
          ##   - cernbox-service
        JupyterHub:
          # We should expose cernbox and swan from the same url to simplify the deployment
          # We can do that by using different base url's for each.
          # I hope this simplifies the ScienceBox ingress as well
          base_url: /swan
      extraConfig:
        # TODO change the config to use the oCIS idp
        # Might need fixes on the swan code cause we break if we don't set user_roles (at least when using GPU).
        00-authConf: |
          def pre_spawn_hook(authenticator, spawner, auth_state):
            spawner.environment['ACCESS_TOKEN'] = auth_state['access_token']
            spawner.environment['OAUTH_INSPECTION_ENDPOINT'] = authenticator.userdata_url.replace('https://', '')
            spawner.user_uid = str(1000) # Fake value -- Nobody uses this.
            decoded_token = authenticator._decode_token(auth_state['access_token'])
            spawner.user_roles = authenticator.claim_roles_key(authenticator, decoded_token)
          c.KeyCloakAuthenticator.pre_spawn_hook = pre_spawn_hook
        02-spawnError: |
          cernbox_url = 'CHANGE_ME' #TODO: This should come from the ScienceBox config !! If necessary, this can come as an env var

          SPAWN_ERROR_MESSAGE = f"""SWAN could not start a session for your user, please try again. If the problem persists, please check:
          <ul>
              <li>Do you have a CERNBox account? If not, click <a href="{cernbox_url}" target="_blank">here</a>.</li>
              <li>Check with the service manager that SWAN is running properly.</li>
          </ul>"""
          c.SpawnHandlersConfigs.spawn_error_message = SPAWN_ERROR_MESSAGE
        03-simpleForm: |
          # Remove this to enable the full form
          c.SwanSpawner.options_form = open('/srv/jupyterhub/jupyterhub_form.html').read()
    singleuser:
      cpu:
        limit: .5
        guarantee: .5
      extraEnv:
        # The sharing functionality won't work because we are deploying oCIS and not oc10
        # This will be replaced in the future with the CS3 APIs
        # SHARE_CBOX_API_DOMAIN: LOCAL_CBOX_URL__CHANGE_ME
        # SHARE_CBOX_API_BASE: /cernbox/swanapi/v1
        HELP_ENDPOINT: https://raw.githubusercontent.com/swan-cern/help/up2u/
        # FIXME Create a galery for ScienceBox? Or the normal one should redirect to different instances?
        # GALLERY_URL: https://swan-gallery.web.cern.ch/

    # TODO For some reason this is not working... We're still debugging
    prePuller:
      hook:
        enabled: false

    ingress:
      annotations:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        #nginx.ingress.kubernetes.io/rewrite-target: /
        #nginx.ingress.kubernetes.io/secure-backends: "true"
      hosts:
      # tls:
      #   - secretName: swan-tls-cert
      #     hosts:
      #       - test.mydomain
      pathSuffix: swan
    custom:
      cvmfs:
        deployDaemonSet: *cvmfsDeployDS
        deployCsiDriver: *cvmfsDeployCSI
        useCsiDriver: *cvmfsUseCSI
        repositories: *cvmfsRepos
      eos:
        deployDaemonSet: *eosDeployDS
        deployCsiDriver: *eosDeployCSI
        useCsiDriver: *eosUseCSI


    # To decide if we keep this or we manage the tls secret differently
    # If we keep it, maybe should change the name from swan.secrets.ingress to smth else
    # swan:
    #   secrets:
    #     ingress:
    #       cert:
    #       key:

## cbox web
cernbox-web:
  initContainers:
    - name: install-web
      image: busybox
      command: ["/bin/sh", "/root/cbox_init.sh"]
      volumeMounts:
      - name: web
        mountPath: "/var/www/web/"
      - name: cbox-cfgmap-init
        mountPath: /root/cbox_init.sh
        subPath: cbox_init.sh
  extraVolumeMounts:
    - name: web-config
      mountPath: /var/www/web/config.json
      subPath: config.json
    - name: web
      mountPath: /var/www/web/
    - name: nginx-conf
      mountPath: /etc/nginx/nginx.conf
      subPath: nginx.conf
  extraVolumes:
    - name: web-config
      configMap:
        name: web-config
    - name: web
      emptyDir: {}
    - name: nginx-conf
      configMap:
        name: nginx-conf
    - name: cbox-cfgmap-init
      configMap:
        name: cbox-cfgmap-init
        defaultMode: 0755
  command: ["/opt/bitnami/nginx/sbin/nginx"]
  args: ["-c", "/etc/nginx/nginx.conf"]
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  extraDeploy:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: nginx-conf
      data:
        nginx.conf: |-
          daemon off;
          worker_processes  auto;

          error_log  /opt/bitnami/nginx/logs/error.log debug; 
          pid        /opt/bitnami/nginx/tmp/nginx.pid;

          events {
              worker_connections  1024;
          }

          http {
              include       /opt/bitnami/nginx/conf/mime.types;
              default_type  application/octet-stream;
              log_format    main '$remote_addr - $remote_user [$time_local] '
                                 '"$request" $status  $body_bytes_sent "$http_referer" '
                                 '"$http_user_agent" "$http_x_forwarded_for"';
              access_log    "/opt/bitnami/nginx/logs/access.log" main;
              add_header    X-Frame-Options SAMEORIGIN;
          
              client_body_temp_path  "/opt/bitnami/nginx/tmp/client_body" 1 2;
              proxy_temp_path        "/opt/bitnami/nginx/tmp/proxy" 1 2;
              fastcgi_temp_path      "/opt/bitnami/nginx/tmp/fastcgi" 1 2;
              scgi_temp_path         "/opt/bitnami/nginx/tmp/scgi" 1 2;
              uwsgi_temp_path        "/opt/bitnami/nginx/tmp/uwsgi" 1 2;
          
              sendfile           on;
              tcp_nopush         on;
              tcp_nodelay        off;
              gzip               on;
              gzip_http_version  1.0;
              gzip_comp_level    2;
              gzip_proxied       any;
              gzip_types         text/plain text/css application/javascript text/xml application/xml+rss;
              keepalive_timeout  65;
              ssl_protocols      TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
              ssl_ciphers        HIGH:!aNULL:!MD5;
              client_max_body_size 80M;
              server_tokens off;
          
              absolute_redirect  off;
              port_in_redirect   off;
          
              server {
                  listen 8080;

                  location ~ ^/(js|css)/
                  {
                      root /var/www/web;
                      add_header Cache-Control "public, max-age=31536000, immutable";
                      etag off;
                      gzip_static on;
                  }
          
                  location / 
                  {
                      root /var/www/web;
                      add_header Cache-Control "no-cache";
                      etag on;
                      gzip_static on;
                      try_files $uri /index.html;
                  }
              }
          }



#
# NGINX
#   This is a simple nginx web server to provide a landing page to ScienceBox users.
#
nginx-welcome-page:
  ingress:
    enabled: true
    path: /sciencebox
  service:
    type: ClusterIP
  staticSiteConfigmap: sciencebox-landing-page-cfgmap
  serverBlock: |-
    server {
      listen 8080;
      location /sciencebox {
        alias /app/;
      }
    }

# values for revad-gateway service
gateway:
  image:
    repository: cs3org/revad
    tag: latest
  service:
    grpc:
      port: 9142
    http:
      port: 9143
  env:
    XrdSecPROTOCOL: sss
  configFiles:
    revad.toml: |
      [shared]
      gatewaysvc = "localhost:9142"
      jwt_secret = "POZSOrlP7AgnTxH7MJebWV8ohvsApgbd4u3Joen30c"

      [grpc]
      address = "0.0.0.0:9142"

      [grpc.services.gateway]
      commit_share_to_storage_grant = true
      commit_share_to_storage_ref = true
      disable_home_creation_on_login = false
      transfer_shared_secret = "replace-me-with-a-transfer-secret"
      transfer_expires = 86400
      share_folder = "MyShares"
      usershareprovidersvc = "localhost:9142"
      publicshareprovidersvc = "localhost:9142"


      datagateway = "http://localhost:9143/data"

      [grpc.services.authprovider]
      auth_manager = "ldap"

      [grpc.services.authprovider.auth_managers.ldap]
      hostname = "sciencebox-ldap"
      port = 636
      insecure = true
      base_dn = "dc=owncloud,dc=com"
      loginfilter = "(&(objectclass=inetOrgPerson)(objectclass=owncloud)(|(uid={{login}})(mail={{login}})))"
      bind_username = "cn=readuser,dc=owncloud,dc=com"
      bind_password = "readuser"
      schema = { dn = "dn", uid = "cn", mail = "mail", displayName = "displayname", cn = "cn" }
      gatewaysvc = "localhost:9142"

      [grpc.services.authregistry]
      driver = "static"

      [grpc.services.authregistry.drivers.static.rules]
      basic = "localhost:9142"
      publicshares = "sciencebox-storageprovider-public:9278"
      machine = "sciencebox-authprovider-machine:9166"
      bearer = "sciencebox-authprovider-bearer:9158"

      [grpc.services.userprovider]
      driver = "ldap"

      [grpc.services.userprovider.drivers.ldap]
      hostname="sciencebox-ldap"
      port = 636
      insecure = true
      base_dn = "dc=owncloud,dc=com"
      userfilter="(&(objectclass=owncloud)(cn=%s))"
      findfilter="(&(objectclass=owncloud)(|(uid={{query}}*)(cn={{query}}*)(displayname={{query}}*)(mail={{query}}*)(description={{query}}*)))"
      attributefilter="(&(objectclass=owncloud)({{attr}}={{value}}))"
      groupfilter="(objectclass=owncloud)"
      bind_username = "cn=readuser,dc=owncloud,dc=com"
      bind_password = "readuser"

      [grpc.services.userprovider.drivers.ldap.schema]
      uid="uid"
      displayName="displayName"
      dn="dn"
      cn="cn"
      mail="mail"

      [grpc.services.groupprovider]
      driver = "ldap"

      [grpc.services.groupprovider.drivers.ldap]
      hostname="sciencebox-ldap"
      port = 636
      insecure = true
      base_dn = "dc=owncloud,dc=com"
      groupfilter="(objectclass=owncloud)"
      findfilter="(&(objectclass=posixGroup)(|(cn={{query}}*)(displayname={{query}}*)(mail={{query}}*)))"
      attributefilter="(&(objectclass=posixGroup)({{attr}}={{value}}))"
      memberfilter="(&(objectclass=posixAccount)(cn={{.OpaqueId}}))"
      bind_username = "cn=readuser,dc=owncloud,dc=com"
      # needs to be templated (for local dev purposes, idp should be ${HOSTNAME})
      bind_password = "readuser"

      [grpc.services.groupprovider.drivers.ldap.schema]
      gid="cn"
      displayName="cn"
      dn="dn"
      cn="cn"

      [grpc.services.storageregistry]
      driver = "static"

      [grpc.services.storageregistry.drivers.static]
      home_provider = "/home"

      [grpc.services.storageregistry.drivers.static.rules]
      "/home" = { address = "sciencebox-storageprovider-home:18000" }
      "/eos/user" = { address = "sciencebox-storageprovider-user:16000" }
      "eos" = { address = "sciencebox-storageprovider-user:16000" }
      "/public" = { address = "sciencebox-storageprovider-public:9278" }
      "public-storage" = { address = "sciencebox-storageprovider-public:9278" }

      [grpc.services.publicshareprovider]
      driver = "sql"
      allowed_paths_for_shares = ["^/eos/user/[a-z]/[0-9a-z\\-]+/.+", "^/eos/project/[a-z]/[0-9a-z\\-]+/.+"]

      [grpc.services.publicshareprovider.drivers.sql]
      db_username = "root"
      db_password = "reva"
      db_host = "sciencebox-mariadb"
      db_port = 3306
      db_name = "my_database"
      password_hash_cost = 11
      enable_expired_shares_cleanup = false
      janitor_run_interval = 60

      [grpc.services.usershareprovider]
      driver = "sql"
      allowed_paths_for_shares = ["^/eos/user/[a-z]/[0-9a-z\\-]+/.+", "^/eos/project/[a-z]/[0-9a-z\\-]+/.+"]

      [grpc.services.usershareprovider.drivers.sql]
      db_username = "root"
      db_password = "reva"
      db_host = "sciencebox-mariadb"
      db_port = 3306
      db_name = "my_database"
      password_hash_cost = 11
      enable_expired_shares_cleanup = false
      janitor_run_interval = 60

      [http]
      address = "0.0.0.0:9143"

      [http.services.datagateway]
      transfer_shared_secret = "replace-me-with-a-transfer-secret"
      timeout = 86400
      insecure = true
      prefix = "data"

      [http.services.ocdav]
      files_namespace = "/eos/{{substr 0 1 .Username}}"
      timeout = 86400
      insecure = true

      [http.services.ocs]
      share_prefix = "/"
      home_namespace = "/"

      [http.services.ocs.config]
      version = "1.8"
      website = "reva"
      # needs to templated
      # host = "https://jimil-nuc.dyndns.cern.ch"
      contact = "admin@localhost"
      ssl = "false"

      [http.services.ocs.capabilities.capabilities.core]
      poll_interval = 60
      webdav_root = "remote.php/webdav"
      status = { installed = true, maintenance = false, nwwsaDbUpgrade = false, version = "10.0.11.5", versionstring = "10.0.11", edition = "community", productname = "reva", hostname = "" }
      support_url_signing = false

      [http.services.ocs.capabilities.capabilities.checksums]
      supported_types = ["sha1", "md5", "adler32"]

      [http.services.ocs.capabilities.capabilities.files]
      private_links = false
      bigfilechunking = false
      blacklisted_files = []
      undelete = true
      versioning = false
      favorites = true

      [http.services.ocs.capabilities.capabilities.dav]

      [http.services.ocs.capabilities.capabilities.files_sharing]
      api_enabled = true
      resharing = false
      group_sharing = true
      auto_accept_share = true
      share_with_group_members_only = true
      share_with_membership_groups_only = true
      default_permissions = 22
      search_min_length = 3

      [http.services.ocs.capabilities.capabilities.files_sharing.public]
      enabled = true
      send_mail = true
      social_share = true
      upload = true
      multiple = true
      supports_upload_only = true
      password = { enforced = false, enforced_for = { read_only = false, read_write = false, upload_only = false } }
      expire_date = { enabled = true }
      can_edit = true

      [http.services.ocs.capabilities.capabilities.files_sharing.user]
      send_mail = true
      profile_picture = false
      settings = [{ enabled = true, version = "1.0.0" }]

      [http.services.ocs.capabilities.capabilities.files_sharing.user_enumeration]
      enabled = true
      group_members_only = true


# values for revad-storage provider home service
storageprovider-home:
  image:
    repository: cs3org/revad
    tag: latest-eos
  service:
    grpc:
      port: 18000
    http:
      port: 17000
  env:
    XrdSecPROTOCOL: sss
  extraVolumes:
    - name: tmp-volume
      emptyDir: {}
    - name: eos-keytab
      secret:
        defaultMode: 256
        secretName: sciencebox-eos-sss-keytab
  extraVolumeMounts:
    - name: tmp-volume
      mountPath: /tmp/reva
    - name: eos-keytab
      mountPath: /etc/eos.keytab
      subPath: eos.keytab
      readOnly: true
  configFiles:
    revad.toml: |
      [shared]
      gatewaysvc = "sciencebox-gateway:9142"
      jwt_secret = "POZSOrlP7AgnTxH7MJebWV8ohvsApgbd4u3Joen30c"

      [grpc]
      address = "0.0.0.0:18000"

      [grpc.services.storageprovider]
      driver = "eoshome"
      mount_path = "/home"
      mount_id = "eos"
      data_server_url = "http://sciencebox-storageprovider-home:17000/data"

      [grpc.services.storageprovider.drivers.eoshome]
      namespace = "/eos/user/"
      quota_node = "/eos/user/"
      master_url = "root://sciencebox-mgm.default.svc.cluster.local:1094"
      slave_url = "root://sciencebox-mgm.default.svc.cluster.local:1094"
      user_layout = "{{substr 0 1 .Username}}/{{.Username}}"
      xrdcopy_binary = "/opt/eos/xrootd/bin/xrdcopy"
      cache_directory = "/tmp/reva"
      use_keytab = true
      keytab = "/etc/eos.keytab"
      sec_protocol = "sss"

      [http]
      address = "0.0.0.0:17000"

      [http.services.dataprovider]
      driver = "eoshome"

      [http.services.dataprovider.drivers.eoshome]
      namespace = "/eos/user/"
      quota_node = "/eos/user/"
      master_url = "root://sciencebox-mgm.default.svc.cluster.local:1094"
      slave_url = "root://sciencebox-mgm.default.svc.cluster.local:1094"
      user_layout = "{{substr 0 1 .Username}}/{{.Username}}"
      xrdcopy_binary = "/opt/eos/xrootd/bin/xrdcopy"
      cache_directory = "/tmp/reva"
      use_keytab = true
      keytab = "/etc/eos.keytab"
      sec_protocol = "sss"

# values for revad-storage provider public service
storageprovider-public:
  image:
    repository: cs3org/revad
    tag: latest-eos
  service:
    grpc:
      port: 9278
  env:
    XrdSecPROTOCOL: sss
  extraVolumes:
    - name: tmp-volume
      emptyDir: {}
    - name: eos-keytab
      secret:
        secretName: sciencebox-eos-sss-keytab
  extraVolumeMounts:
    - name: tmp-volume
      mountPath: /tmp/reva
    - name: eos-keytab
      mountPath: /etc/eos.keytab
      subPath: eos.keytab
      readOnly: true
  configFiles:
    revad.toml: |
      [shared]
      gatewaysvc = "sciencebox-gateway:9142"
      jwt_secret = "POZSOrlP7AgnTxH7MJebWV8ohvsApgbd4u3Joen30c"

      [grpc]
      address = "0.0.0.0:9278"

      [grpc.services.publicstorageprovider]
      mount_path = "/public"
      mount_id = "public-storage"
      gateway_addr = "sciencebox-gateway:9142"

      [grpc.services.authprovider]
      auth_manager = "publicshares"

      [grpc.services.authprovider.auth_managers.publicshares]
      gateway_addr = "sciencebox-gateway:9142"
# values for revad-storage provider user service
storageprovider-user:
  image:
    repository: cs3org/revad
    tag: latest-eos
  service:
    grpc:
      port: 16000
    http:
      port: 15000
  env:
    XrdSecPROTOCOL: sss
  extraVolumes:
    - name: tmp-volume
      emptyDir: {}
    - name: eos-keytab
      secret:
        defaultMode: 256
        secretName: sciencebox-eos-sss-keytab
  extraVolumeMounts:
    - name: tmp-volume
      mountPath: /tmp/reva
    - name: eos-keytab
      mountPath: /etc/eos.keytab
      subPath: eos.keytab
      readOnly: true
  configFiles:
    revad.toml: |
      [shared]
      gatewaysvc = "sciencebox-gateway:9142"
      jwt_secret = "POZSOrlP7AgnTxH7MJebWV8ohvsApgbd4u3Joen30c"

      [grpc]
      address = "0.0.0.0:16000"

      [grpc.services.storageprovider]
      driver = "eos"
      mount_path = "/eos/user"
      mount_id = "eos"
      data_server_url = "http://sciencebox-storageprovider-user:15000/data"

      [grpc.services.storageprovider.drivers.eos]
      namespace = "/eos/user/"
      quota_node = "/eos/user/"
      master_url = "root://sciencebox-mgm.default.svc.cluster.local:1094"
      slave_url = "root://sciencebox-mgm.default.svc.cluster.local:1094"
      user_layout = "{{substr 0 1 .Username}}/{{.Username}}"
      xrdcopy_binary = "/opt/eos/xrootd/bin/xrdcopy"
      cache_directory = "/tmp/reva"
      use_keytab = true
      keytab = "/etc/eos.keytab"
      sec_protocol = "sss"

      [http]
      address = "0.0.0.0:15000"

      [http.services.dataprovider]
      driver = "eos"

      [http.services.dataprovider.drivers.eos]
      namespace = "/eos/user/"
      quota_node = "/eos/user/"
      master_url = "root://sciencebox-mgm.default.svc.cluster.local:1094"
      slave_url = "root://sciencebox-mgm.default.svc.cluster.local:1094"
      user_layout = "{{substr 0 1 .Username}}/{{.Username}}"
      xrdcopy_binary = "/opt/eos/xrootd/bin/xrdcopy"
      cache_directory = "/tmp/reva"
      use_keytab = true
      keytab = "/etc/eos.keytab"
      sec_protocol = "sss"
#values for revad-auth provider machine service
authprovider-machine:
  image:
    repository: cs3org/revad
    tag: latest
  service:
    grpc:
      port: 9166
  configFiles:
    revad.toml: |
      [shared]
      gatewaysvc = "localhost:9142"
      jwt_secret = "POZSOrlP7AgnTxH7MJebWV8ohvsApgbd4u3Joen30c"

      [grpc]
      address = "0.0.0.0:9166"

      [grpc.services.authprovider]
      auth_manager = "machine"

      [grpc.services.authprovider.auth_managers.machine]
      api_key = "random_api_key"
      gateway_addr = "sciencebox-gateway:9142"

authprovider-bearer:
  image:
    repository: gitlab-registry.cern.ch/sciencebox/hotfixes/revad
    tag: latest-20220815
  service:
    grpc:
      port: 9158
  configFiles:
    revad.toml: |
      [shared]
      gatewaysvc = "sciencebox-gateway:9142"
      jwt_secret = "POZSOrlP7AgnTxH7MJebWV8ohvsApgbd4u3Joen30c"

      [grpc]
      address = "0.0.0.0:9158"

      [grpc.services.authprovider]
      auth_manager = "oidc"

      [grpc.services.authprovider.auth_managers.oidc]
      insecure = true
      issuer = "https://jimil-laptop.dyndns.cern.ch"
      id_claim = "name"
      uid_claim = "uid"
      gid_claim = "gid"
      gatewaysvc = "sciencebox-gateway:9142"
# values for mariadb
mariadb:
  initdbScripts:
    my_init_script.sql: |
      CREATE TABLE `oc_share` (
      `id` int(11) NOT NULL AUTO_INCREMENT,
      `share_type` smallint(6) NOT NULL DEFAULT '0',
      `share_with` varchar(255) COLLATE utf8_bin DEFAULT NULL,
      `uid_owner` varchar(64) COLLATE utf8_bin NOT NULL DEFAULT '',
      `uid_initiator` varchar(64) COLLATE utf8_bin DEFAULT NULL,
      `parent` int(11) DEFAULT NULL,
      `item_type` varchar(64) COLLATE utf8_bin NOT NULL DEFAULT '',
      `item_source` varchar(255) COLLATE utf8_bin DEFAULT NULL,
      `item_target` varchar(255) COLLATE utf8_bin DEFAULT NULL,
      `file_source` bigint(20) unsigned DEFAULT NULL,
      `file_target` varchar(512) COLLATE utf8_bin DEFAULT NULL,
      `permissions` smallint(6) NOT NULL DEFAULT '0',
      `stime` bigint(20) NOT NULL DEFAULT '0',
      `accepted` smallint(6) NOT NULL DEFAULT '0',
      `expiration` datetime DEFAULT NULL,
      `token` varchar(32) COLLATE utf8_bin DEFAULT NULL,
      `mail_send` smallint(6) NOT NULL DEFAULT '0',
      `fileid_prefix` varchar(255) COLLATE utf8_bin DEFAULT NULL,
      `orphan` tinyint(4) DEFAULT NULL,
      `share_name` varchar(255) COLLATE utf8_bin DEFAULT NULL,
      PRIMARY KEY (`id`),
      KEY `item_share_type_index` (`item_type`,`share_type`),
      KEY `file_source_index` (`file_source`),
      KEY `token_index` (`token`)
      ) ENGINE=InnoDB AUTO_INCREMENT=333566 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
    
      CREATE TABLE `oc_share_status` (
      `id` int(11) NOT NULL,
      `recipient` varchar(255) NOT NULL,
      `state` int(11) DEFAULT '0',
      PRIMARY KEY (`id`,`recipient`)
      ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  auth:
    rootPassword: reva
    database: my_database
    username: reva
    password: reva
